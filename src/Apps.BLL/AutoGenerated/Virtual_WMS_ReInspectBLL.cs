//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Unity.Attributes;
using System.Transactions;
using Apps.BLL.Core;
using Apps.Locale;
using LinqToExcel;
using System.IO;
using System.Text;
using Apps.IDAL.WMS;
using Apps.Models.WMS;
using Apps.IBLL.WMS;
namespace Apps.BLL.WMS
{
	public partial class WMS_ReInspectBLL: Virtual_WMS_ReInspectBLL,IWMS_ReInspectBLL
	{
        

	}
	public class Virtual_WMS_ReInspectBLL
	{
        [Dependency]
        public IWMS_ReInspectRepository m_Rep { get; set; }

		public virtual List<WMS_ReInspectModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<WMS_ReInspect> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								
								
								a=>a.OCheckOutResult.Contains(queryStr)
								
								
								|| a.OCheckOutRemark.Contains(queryStr)
								
								|| a.NCheckOutResult.Contains(queryStr)
								
								
								|| a.NCheckOutRemark.Contains(queryStr)
								
								|| a.Remark.Contains(queryStr)
								|| a.AdjustMan.Contains(queryStr)
								
								|| a.Attr1.Contains(queryStr)
								|| a.Attr2.Contains(queryStr)
								|| a.Attr3.Contains(queryStr)
								|| a.Attr4.Contains(queryStr)
								|| a.Attr5.Contains(queryStr)
								|| a.CreatePerson.Contains(queryStr)
								
								|| a.ModifyPerson.Contains(queryStr)
								
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }

		public virtual List<WMS_ReInspectModel> GetListByUserId(ref GridPager pager, string userId,string queryStr)
		{
			return new List<WMS_ReInspectModel>();
		}
		
		public virtual List<WMS_ReInspectModel> GetListByParentId(ref GridPager pager, string queryStr,object parentId)
        {
			return new List<WMS_ReInspectModel>();
		}

        public virtual List<WMS_ReInspectModel> CreateModelList(ref IQueryable<WMS_ReInspect> queryData)
        {

            List<WMS_ReInspectModel> modelList = (from r in queryData
                                              select new WMS_ReInspectModel
                                              {
													Id = r.Id,
													AIId = r.AIId,
													OCheckOutResult = r.OCheckOutResult,
													OQualifyQty = r.OQualifyQty,
													ONoQualifyQty = r.ONoQualifyQty,
													OCheckOutRemark = r.OCheckOutRemark,
													OCheckOutDate = r.OCheckOutDate,
													NCheckOutResult = r.NCheckOutResult,
													NQualifyQty = r.NQualifyQty,
													NNoQualifyQty = r.NNoQualifyQty,
													NCheckOutRemark = r.NCheckOutRemark,
													NCheckOutDate = r.NCheckOutDate,
													Remark = r.Remark,
													AdjustMan = r.AdjustMan,
													AdjustDate = r.AdjustDate,
													Attr1 = r.Attr1,
													Attr2 = r.Attr2,
													Attr3 = r.Attr3,
													Attr4 = r.Attr4,
													Attr5 = r.Attr5,
													CreatePerson = r.CreatePerson,
													CreateTime = r.CreateTime,
													ModifyPerson = r.ModifyPerson,
													ModifyTime = r.ModifyTime,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, WMS_ReInspectModel model)
        {
            try
            {
                WMS_ReInspect entity = m_Rep.GetById(model.Id);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new WMS_ReInspect();
               				entity.Id = model.Id;
				entity.AIId = model.AIId;
				entity.OCheckOutResult = model.OCheckOutResult;
				entity.OQualifyQty = model.OQualifyQty;
				entity.ONoQualifyQty = model.ONoQualifyQty;
				entity.OCheckOutRemark = model.OCheckOutRemark;
				entity.OCheckOutDate = model.OCheckOutDate;
				entity.NCheckOutResult = model.NCheckOutResult;
				entity.NQualifyQty = model.NQualifyQty;
				entity.NNoQualifyQty = model.NNoQualifyQty;
				entity.NCheckOutRemark = model.NCheckOutRemark;
				entity.NCheckOutDate = model.NCheckOutDate;
				entity.Remark = model.Remark;
				entity.AdjustMan = model.AdjustMan;
				entity.AdjustDate = model.AdjustDate;
				entity.Attr1 = model.Attr1;
				entity.Attr2 = model.Attr2;
				entity.Attr3 = model.Attr3;
				entity.Attr4 = model.Attr4;
				entity.Attr5 = model.Attr5;
				entity.CreatePerson = model.CreatePerson;
				entity.CreateTime = model.CreateTime;
				entity.ModifyPerson = model.ModifyPerson;
				entity.ModifyTime = model.ModifyTime;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, object id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, object[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, WMS_ReInspectModel model)
        {
            try
            {
                WMS_ReInspect entity = m_Rep.GetById(model.Id);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.Id = model.Id;
				entity.AIId = model.AIId;
				entity.OCheckOutResult = model.OCheckOutResult;
				entity.OQualifyQty = model.OQualifyQty;
				entity.ONoQualifyQty = model.ONoQualifyQty;
				entity.OCheckOutRemark = model.OCheckOutRemark;
				entity.OCheckOutDate = model.OCheckOutDate;
				entity.NCheckOutResult = model.NCheckOutResult;
				entity.NQualifyQty = model.NQualifyQty;
				entity.NNoQualifyQty = model.NNoQualifyQty;
				entity.NCheckOutRemark = model.NCheckOutRemark;
				entity.NCheckOutDate = model.NCheckOutDate;
				entity.Remark = model.Remark;
				entity.AdjustMan = model.AdjustMan;
				entity.AdjustDate = model.AdjustDate;
				entity.Attr1 = model.Attr1;
				entity.Attr2 = model.Attr2;
				entity.Attr3 = model.Attr3;
				entity.Attr4 = model.Attr4;
				entity.Attr5 = model.Attr5;
				entity.CreatePerson = model.CreatePerson;
				entity.CreateTime = model.CreateTime;
				entity.ModifyPerson = model.ModifyPerson;
				entity.ModifyTime = model.ModifyTime;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual WMS_ReInspectModel GetById(object id)
        {
            if (IsExists(id))
            {
                WMS_ReInspect entity = m_Rep.GetById(id);
                WMS_ReInspectModel model = new WMS_ReInspectModel();
                              				model.Id = entity.Id;
				model.AIId = entity.AIId;
				model.OCheckOutResult = entity.OCheckOutResult;
				model.OQualifyQty = entity.OQualifyQty;
				model.ONoQualifyQty = entity.ONoQualifyQty;
				model.OCheckOutRemark = entity.OCheckOutRemark;
				model.OCheckOutDate = entity.OCheckOutDate;
				model.NCheckOutResult = entity.NCheckOutResult;
				model.NQualifyQty = entity.NQualifyQty;
				model.NNoQualifyQty = entity.NNoQualifyQty;
				model.NCheckOutRemark = entity.NCheckOutRemark;
				model.NCheckOutDate = entity.NCheckOutDate;
				model.Remark = entity.Remark;
				model.AdjustMan = entity.AdjustMan;
				model.AdjustDate = entity.AdjustDate;
				model.Attr1 = entity.Attr1;
				model.Attr2 = entity.Attr2;
				model.Attr3 = entity.Attr3;
				model.Attr4 = entity.Attr4;
				model.Attr5 = entity.Attr5;
				model.CreatePerson = entity.CreatePerson;
				model.CreateTime = entity.CreateTime;
				model.ModifyPerson = entity.ModifyPerson;
				model.ModifyTime = entity.ModifyTime;
 
                return model;
            }
            else
            {
                return null;
            }
        }


		 /// <summary>
        /// 校验Excel数据,这个方法一般用于重写校验逻辑
        /// </summary>
        public virtual bool CheckImportData(string fileName, List<WMS_ReInspectModel> list,ref ValidationErrors errors )
        {
          
            var targetFile = new FileInfo(fileName);

            if (!targetFile.Exists)
            {

                errors.Add("导入的数据文件不存在");
                return false;
            }

            var excelFile = new ExcelQueryFactory(fileName);

            //对应列头
			 				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.AIId, "到货送检单ID");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.OCheckOutResult, "原送检单结果");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.OQualifyQty, "原送检单合格数量");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.ONoQualifyQty, "原送检单不合格数量");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.OCheckOutRemark, "原送检单说明");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.OCheckOutDate, "原送检单检验日期");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.NCheckOutResult, "新送检单结果");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.NQualifyQty, "新送检单合格数量");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.NNoQualifyQty, "新送检单不合格数量");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.NCheckOutRemark, "新送检单检验结果");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.NCheckOutDate, "新送检单检验日期");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.Remark, "调整说明");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.AdjustMan, "调整人");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.AdjustDate, "调整时间");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.Attr1, "Attr1");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.Attr2, "Attr2");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.Attr3, "Attr3");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.Attr4, "Attr4");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.Attr5, "Attr5");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.CreatePerson, "创建时间");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.CreateTime, "创建人");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.ModifyPerson, "修改人");
				 excelFile.AddMapping<WMS_ReInspectModel>(x => x.ModifyTime, "修改人");
 
            //SheetName
            var excelContent = excelFile.Worksheet<WMS_ReInspectModel>(0);
            int rowIndex = 1;
            //检查数据正确性
            foreach (var row in excelContent)
            {
                var errorMessage = new StringBuilder();
                var entity = new WMS_ReInspectModel();
						 				  entity.Id = row.Id;
				  entity.AIId = row.AIId;
				  entity.OCheckOutResult = row.OCheckOutResult;
				  entity.OQualifyQty = row.OQualifyQty;
				  entity.ONoQualifyQty = row.ONoQualifyQty;
				  entity.OCheckOutRemark = row.OCheckOutRemark;
				  entity.OCheckOutDate = row.OCheckOutDate;
				  entity.NCheckOutResult = row.NCheckOutResult;
				  entity.NQualifyQty = row.NQualifyQty;
				  entity.NNoQualifyQty = row.NNoQualifyQty;
				  entity.NCheckOutRemark = row.NCheckOutRemark;
				  entity.NCheckOutDate = row.NCheckOutDate;
				  entity.Remark = row.Remark;
				  entity.AdjustMan = row.AdjustMan;
				  entity.AdjustDate = row.AdjustDate;
				  entity.Attr1 = row.Attr1;
				  entity.Attr2 = row.Attr2;
				  entity.Attr3 = row.Attr3;
				  entity.Attr4 = row.Attr4;
				  entity.Attr5 = row.Attr5;
				  entity.CreatePerson = row.CreatePerson;
				  entity.CreateTime = row.CreateTime;
				  entity.ModifyPerson = row.ModifyPerson;
				  entity.ModifyTime = row.ModifyTime;
 
                //=============================================================================
                if (errorMessage.Length > 0)
                {
                    errors.Add(string.Format(
                        "第 {0} 列发现错误：{1}{2}",
                        rowIndex,
                        errorMessage,
                        "<br/>"));
                }
                list.Add(entity);
                rowIndex += 1;
            }
            if (errors.Count > 0)
            {
                return false;
            }
            return true;
        }

        /// <summary>
        /// 保存数据
        /// </summary>
        public virtual void SaveImportData(IEnumerable<WMS_ReInspectModel> list)
        {
            try
            {
                using (DBContainer db = new DBContainer())
                {
                    foreach (var model in list)
                    {
                        WMS_ReInspect entity = new WMS_ReInspect();
                       						entity.Id = 0;
						entity.AIId = model.AIId;
						entity.OCheckOutResult = model.OCheckOutResult;
						entity.OQualifyQty = model.OQualifyQty;
						entity.ONoQualifyQty = model.ONoQualifyQty;
						entity.OCheckOutRemark = model.OCheckOutRemark;
						entity.OCheckOutDate = model.OCheckOutDate;
						entity.NCheckOutResult = model.NCheckOutResult;
						entity.NQualifyQty = model.NQualifyQty;
						entity.NNoQualifyQty = model.NNoQualifyQty;
						entity.NCheckOutRemark = model.NCheckOutRemark;
						entity.NCheckOutDate = model.NCheckOutDate;
						entity.Remark = model.Remark;
						entity.AdjustMan = model.AdjustMan;
						entity.AdjustDate = model.AdjustDate;
						entity.Attr1 = model.Attr1;
						entity.Attr2 = model.Attr2;
						entity.Attr3 = model.Attr3;
						entity.Attr4 = model.Attr4;
						entity.Attr5 = model.Attr5;
						entity.CreatePerson = model.CreatePerson;
						entity.CreateTime = ResultHelper.NowTime;
						entity.ModifyPerson = model.ModifyPerson;
						entity.ModifyTime = model.ModifyTime;
 
                        db.WMS_ReInspect.Add(entity);
                    }
                    db.SaveChanges();
                }
            }
            catch(Exception ex)
            {
                throw;
            }
        }
		public virtual bool Check(ref ValidationErrors errors, object id,int flag)
        {
			return true;
		}

        public virtual bool IsExists(object id)
        {
            return m_Rep.IsExist(id);
        }
		
		public void Dispose()
        { 
            
        }

	}
}

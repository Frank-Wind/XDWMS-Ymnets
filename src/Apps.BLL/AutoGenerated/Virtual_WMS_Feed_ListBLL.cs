//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Unity.Attributes;
using System.Transactions;
using Apps.BLL.Core;
using Apps.Locale;
using LinqToExcel;
using System.IO;
using System.Text;
using Apps.IDAL.WMS;
using Apps.Models.WMS;
using Apps.IBLL.WMS;
namespace Apps.BLL.WMS
{
	public partial class WMS_Feed_ListBLL: Virtual_WMS_Feed_ListBLL,IWMS_Feed_ListBLL
	{
        

	}
	public class Virtual_WMS_Feed_ListBLL
	{
        [Dependency]
        public IWMS_Feed_ListRepository m_Rep { get; set; }

		public virtual List<WMS_Feed_ListModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<WMS_Feed_List> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								
								a=>a.FeedBillNum.Contains(queryStr)
								|| a.ReleaseBillNum.Contains(queryStr)
								|| a.Department.Contains(queryStr)
								
								
								|| a.Lot.Contains(queryStr)
								
								
								|| a.Capacity.Contains(queryStr)
								
								
								|| a.Remark.Contains(queryStr)
								|| a.PrintStaus.Contains(queryStr)
								
								|| a.PrintMan.Contains(queryStr)
								|| a.ConfirmStatus.Contains(queryStr)
								|| a.ConfirmMan.Contains(queryStr)
								
								|| a.Attr1.Contains(queryStr)
								|| a.Attr2.Contains(queryStr)
								|| a.Attr3.Contains(queryStr)
								|| a.Attr4.Contains(queryStr)
								|| a.Attr5.Contains(queryStr)
								|| a.CreatePerson.Contains(queryStr)
								
								|| a.ModifyPerson.Contains(queryStr)
								
								|| a.ConfirmMessage.Contains(queryStr)
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }

		public virtual List<WMS_Feed_ListModel> GetListByUserId(ref GridPager pager, string userId,string queryStr)
		{
			return new List<WMS_Feed_ListModel>();
		}
		
		public virtual List<WMS_Feed_ListModel> GetListByParentId(ref GridPager pager, string queryStr,object parentId)
        {
			return new List<WMS_Feed_ListModel>();
		}

        public virtual List<WMS_Feed_ListModel> CreateModelList(ref IQueryable<WMS_Feed_List> queryData)
        {

            List<WMS_Feed_ListModel> modelList = (from r in queryData
                                              select new WMS_Feed_ListModel
                                              {
													Id = r.Id,
													FeedBillNum = r.FeedBillNum,
													ReleaseBillNum = r.ReleaseBillNum,
													Department = r.Department,
													AssemblyPartId = r.AssemblyPartId,
													SubAssemblyPartId = r.SubAssemblyPartId,
													Lot = r.Lot,
													FeedQty = r.FeedQty,
													BoxQty = r.BoxQty,
													Capacity = r.Capacity,
													InvId = r.InvId,
													SubInvId = r.SubInvId,
													Remark = r.Remark,
													PrintStaus = r.PrintStaus,
													PrintDate = r.PrintDate,
													PrintMan = r.PrintMan,
													ConfirmStatus = r.ConfirmStatus,
													ConfirmMan = r.ConfirmMan,
													ConfirmDate = r.ConfirmDate,
													Attr1 = r.Attr1,
													Attr2 = r.Attr2,
													Attr3 = r.Attr3,
													Attr4 = r.Attr4,
													Attr5 = r.Attr5,
													CreatePerson = r.CreatePerson,
													CreateTime = r.CreateTime,
													ModifyPerson = r.ModifyPerson,
													ModifyTime = r.ModifyTime,
													ConfirmMessage = r.ConfirmMessage,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, WMS_Feed_ListModel model)
        {
            try
            {
                WMS_Feed_List entity = m_Rep.GetById(model.Id);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new WMS_Feed_List();
               				entity.Id = model.Id;
				entity.FeedBillNum = model.FeedBillNum;
				entity.ReleaseBillNum = model.ReleaseBillNum;
				entity.Department = model.Department;
				entity.AssemblyPartId = model.AssemblyPartId;
				entity.SubAssemblyPartId = model.SubAssemblyPartId;
				entity.Lot = model.Lot;
				entity.FeedQty = model.FeedQty;
				entity.BoxQty = model.BoxQty;
				entity.Capacity = model.Capacity;
				entity.InvId = model.InvId;
				entity.SubInvId = model.SubInvId;
				entity.Remark = model.Remark;
				entity.PrintStaus = model.PrintStaus;
				entity.PrintDate = model.PrintDate;
				entity.PrintMan = model.PrintMan;
				entity.ConfirmStatus = model.ConfirmStatus;
				entity.ConfirmMan = model.ConfirmMan;
				entity.ConfirmDate = model.ConfirmDate;
				entity.Attr1 = model.Attr1;
				entity.Attr2 = model.Attr2;
				entity.Attr3 = model.Attr3;
				entity.Attr4 = model.Attr4;
				entity.Attr5 = model.Attr5;
				entity.CreatePerson = model.CreatePerson;
				entity.CreateTime = model.CreateTime;
				entity.ModifyPerson = model.ModifyPerson;
				entity.ModifyTime = model.ModifyTime;
				entity.ConfirmMessage = model.ConfirmMessage;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, object id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, object[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, WMS_Feed_ListModel model)
        {
            try
            {
                WMS_Feed_List entity = m_Rep.GetById(model.Id);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.Id = model.Id;
				entity.FeedBillNum = model.FeedBillNum;
				entity.ReleaseBillNum = model.ReleaseBillNum;
				entity.Department = model.Department;
				entity.AssemblyPartId = model.AssemblyPartId;
				entity.SubAssemblyPartId = model.SubAssemblyPartId;
				entity.Lot = model.Lot;
				entity.FeedQty = model.FeedQty;
				entity.BoxQty = model.BoxQty;
				entity.Capacity = model.Capacity;
				entity.InvId = model.InvId;
				entity.SubInvId = model.SubInvId;
				entity.Remark = model.Remark;
				entity.PrintStaus = model.PrintStaus;
				entity.PrintDate = model.PrintDate;
				entity.PrintMan = model.PrintMan;
				entity.ConfirmStatus = model.ConfirmStatus;
				entity.ConfirmMan = model.ConfirmMan;
				entity.ConfirmDate = model.ConfirmDate;
				entity.Attr1 = model.Attr1;
				entity.Attr2 = model.Attr2;
				entity.Attr3 = model.Attr3;
				entity.Attr4 = model.Attr4;
				entity.Attr5 = model.Attr5;
				entity.CreatePerson = model.CreatePerson;
				entity.CreateTime = model.CreateTime;
				entity.ModifyPerson = model.ModifyPerson;
				entity.ModifyTime = model.ModifyTime;
				entity.ConfirmMessage = model.ConfirmMessage;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual WMS_Feed_ListModel GetById(object id)
        {
            if (IsExists(id))
            {
                WMS_Feed_List entity = m_Rep.GetById(id);
                WMS_Feed_ListModel model = new WMS_Feed_ListModel();
                              				model.Id = entity.Id;
				model.FeedBillNum = entity.FeedBillNum;
				model.ReleaseBillNum = entity.ReleaseBillNum;
				model.Department = entity.Department;
				model.AssemblyPartId = entity.AssemblyPartId;
				model.SubAssemblyPartId = entity.SubAssemblyPartId;
				model.Lot = entity.Lot;
				model.FeedQty = entity.FeedQty;
				model.BoxQty = entity.BoxQty;
				model.Capacity = entity.Capacity;
				model.InvId = entity.InvId;
				model.SubInvId = entity.SubInvId;
				model.Remark = entity.Remark;
				model.PrintStaus = entity.PrintStaus;
				model.PrintDate = entity.PrintDate;
				model.PrintMan = entity.PrintMan;
				model.ConfirmStatus = entity.ConfirmStatus;
				model.ConfirmMan = entity.ConfirmMan;
				model.ConfirmDate = entity.ConfirmDate;
				model.Attr1 = entity.Attr1;
				model.Attr2 = entity.Attr2;
				model.Attr3 = entity.Attr3;
				model.Attr4 = entity.Attr4;
				model.Attr5 = entity.Attr5;
				model.CreatePerson = entity.CreatePerson;
				model.CreateTime = entity.CreateTime;
				model.ModifyPerson = entity.ModifyPerson;
				model.ModifyTime = entity.ModifyTime;
				model.ConfirmMessage = entity.ConfirmMessage;
 
                return model;
            }
            else
            {
                return null;
            }
        }


		 /// <summary>
        /// 校验Excel数据,这个方法一般用于重写校验逻辑
        /// </summary>
        public virtual bool CheckImportData(string fileName, List<WMS_Feed_ListModel> list,ref ValidationErrors errors )
        {
          
            var targetFile = new FileInfo(fileName);

            if (!targetFile.Exists)
            {

                errors.Add("导入的数据文件不存在");
                return false;
            }

            var excelFile = new ExcelQueryFactory(fileName);

            //对应列头
			 				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.FeedBillNum, "投料单号（业务）");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.ReleaseBillNum, "投料单号（系统）");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.Department, "投料部门");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.AssemblyPartId, "总成物料");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.SubAssemblyPartId, "投料物料");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.Lot, "批次号：YYYYMM");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.FeedQty, "投料数量");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.BoxQty, "箱数");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.Capacity, "体积");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.InvId, "库存");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.SubInvId, "子库存");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.Remark, "备注");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.PrintStaus, "打印状态");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.PrintDate, "打印时间");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.PrintMan, "打印人");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.ConfirmStatus, "确认状态");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.ConfirmMan, "确认人");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.ConfirmDate, "确认时间");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.Attr1, "Attr1");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.Attr2, "Attr2");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.Attr3, "Attr3");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.Attr4, "Attr4");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.Attr5, "Attr5");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.CreatePerson, "创建人");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.CreateTime, "创建时间");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.ModifyPerson, "修改人");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.ModifyTime, "修改时间");
				 excelFile.AddMapping<WMS_Feed_ListModel>(x => x.ConfirmMessage, "ConfirmMessage");
 
            //SheetName
            var excelContent = excelFile.Worksheet<WMS_Feed_ListModel>(0);
            int rowIndex = 1;
            //检查数据正确性
            foreach (var row in excelContent)
            {
                var errorMessage = new StringBuilder();
                var entity = new WMS_Feed_ListModel();
						 				  entity.Id = row.Id;
				  entity.FeedBillNum = row.FeedBillNum;
				  entity.ReleaseBillNum = row.ReleaseBillNum;
				  entity.Department = row.Department;
				  entity.AssemblyPartId = row.AssemblyPartId;
				  entity.SubAssemblyPartId = row.SubAssemblyPartId;
				  entity.Lot = row.Lot;
				  entity.FeedQty = row.FeedQty;
				  entity.BoxQty = row.BoxQty;
				  entity.Capacity = row.Capacity;
				  entity.InvId = row.InvId;
				  entity.SubInvId = row.SubInvId;
				  entity.Remark = row.Remark;
				  entity.PrintStaus = row.PrintStaus;
				  entity.PrintDate = row.PrintDate;
				  entity.PrintMan = row.PrintMan;
				  entity.ConfirmStatus = row.ConfirmStatus;
				  entity.ConfirmMan = row.ConfirmMan;
				  entity.ConfirmDate = row.ConfirmDate;
				  entity.Attr1 = row.Attr1;
				  entity.Attr2 = row.Attr2;
				  entity.Attr3 = row.Attr3;
				  entity.Attr4 = row.Attr4;
				  entity.Attr5 = row.Attr5;
				  entity.CreatePerson = row.CreatePerson;
				  entity.CreateTime = row.CreateTime;
				  entity.ModifyPerson = row.ModifyPerson;
				  entity.ModifyTime = row.ModifyTime;
				  entity.ConfirmMessage = row.ConfirmMessage;
 
                //=============================================================================
                if (errorMessage.Length > 0)
                {
                    errors.Add(string.Format(
                        "第 {0} 列发现错误：{1}{2}",
                        rowIndex,
                        errorMessage,
                        "<br/>"));
                }
                list.Add(entity);
                rowIndex += 1;
            }
            if (errors.Count > 0)
            {
                return false;
            }
            return true;
        }

        /// <summary>
        /// 保存数据
        /// </summary>
        public virtual void SaveImportData(IEnumerable<WMS_Feed_ListModel> list)
        {
            try
            {
                using (DBContainer db = new DBContainer())
                {
                    foreach (var model in list)
                    {
                        WMS_Feed_List entity = new WMS_Feed_List();
                       						entity.Id = 0;
						entity.FeedBillNum = model.FeedBillNum;
						entity.ReleaseBillNum = model.ReleaseBillNum;
						entity.Department = model.Department;
						entity.AssemblyPartId = model.AssemblyPartId;
						entity.SubAssemblyPartId = model.SubAssemblyPartId;
						entity.Lot = model.Lot;
						entity.FeedQty = model.FeedQty;
						entity.BoxQty = model.BoxQty;
						entity.Capacity = model.Capacity;
						entity.InvId = model.InvId;
						entity.SubInvId = model.SubInvId;
						entity.Remark = model.Remark;
						entity.PrintStaus = model.PrintStaus;
						entity.PrintDate = model.PrintDate;
						entity.PrintMan = model.PrintMan;
						entity.ConfirmStatus = model.ConfirmStatus;
						entity.ConfirmMan = model.ConfirmMan;
						entity.ConfirmDate = model.ConfirmDate;
						entity.Attr1 = model.Attr1;
						entity.Attr2 = model.Attr2;
						entity.Attr3 = model.Attr3;
						entity.Attr4 = model.Attr4;
						entity.Attr5 = model.Attr5;
						entity.CreatePerson = model.CreatePerson;
						entity.CreateTime = ResultHelper.NowTime;
						entity.ModifyPerson = model.ModifyPerson;
						entity.ModifyTime = model.ModifyTime;
						entity.ConfirmMessage = model.ConfirmMessage;
 
                        db.WMS_Feed_List.Add(entity);
                    }
                    db.SaveChanges();
                }
            }
            catch(Exception ex)
            {
                throw;
            }
        }
		public virtual bool Check(ref ValidationErrors errors, object id,int flag)
        {
			return true;
		}

        public virtual bool IsExists(object id)
        {
            return m_Rep.IsExist(id);
        }
		
		public void Dispose()
        { 
            
        }

	}
}

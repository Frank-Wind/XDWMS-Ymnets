//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Unity.Attributes;
using System.Transactions;
using Apps.BLL.Core;
using Apps.Locale;
using LinqToExcel;
using System.IO;
using System.Text;
using Apps.IDAL.WMS;
using Apps.Models.WMS;
using Apps.IBLL.WMS;
namespace Apps.BLL.WMS
{
	public partial class WMS_ReportParamBLL: Virtual_WMS_ReportParamBLL,IWMS_ReportParamBLL
	{
        

	}
	public class Virtual_WMS_ReportParamBLL
	{
        [Dependency]
        public IWMS_ReportParamRepository m_Rep { get; set; }

		public virtual List<WMS_ReportParamModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<WMS_ReportParam> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								
								a=>a.ParamCode.Contains(queryStr)
								
								|| a.InputNo.Contains(queryStr)
								|| a.ParamName.Contains(queryStr)
								|| a.ShowName.Contains(queryStr)
								|| a.ParamType.Contains(queryStr)
								|| a.ParamData.Contains(queryStr)
								|| a.DefaultValue.Contains(queryStr)
								|| a.ParamElement.Contains(queryStr)
								|| a.Remark.Contains(queryStr)
								|| a.CreatePerson.Contains(queryStr)
								
								|| a.ModifyPerson.Contains(queryStr)
								
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }

		public virtual List<WMS_ReportParamModel> GetListByUserId(ref GridPager pager, string userId,string queryStr)
		{
			return new List<WMS_ReportParamModel>();
		}
		
		public virtual List<WMS_ReportParamModel> GetListByParentId(ref GridPager pager, string queryStr,object parentId)
        {
			return new List<WMS_ReportParamModel>();
		}

        public virtual List<WMS_ReportParamModel> CreateModelList(ref IQueryable<WMS_ReportParam> queryData)
        {

            List<WMS_ReportParamModel> modelList = (from r in queryData
                                              select new WMS_ReportParamModel
                                              {
													Id = r.Id,
													ParamCode = r.ParamCode,
													ReportId = r.ReportId,
													InputNo = r.InputNo,
													ParamName = r.ParamName,
													ShowName = r.ShowName,
													ParamType = r.ParamType,
													ParamData = r.ParamData,
													DefaultValue = r.DefaultValue,
													ParamElement = r.ParamElement,
													Remark = r.Remark,
													CreatePerson = r.CreatePerson,
													CreateTime = r.CreateTime,
													ModifyPerson = r.ModifyPerson,
													ModifyTime = r.ModifyTime,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, WMS_ReportParamModel model)
        {
            try
            {
                WMS_ReportParam entity = m_Rep.GetById(model.Id);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new WMS_ReportParam();
               				entity.Id = model.Id;
				entity.ParamCode = model.ParamCode;
				entity.ReportId = model.ReportId;
				entity.InputNo = model.InputNo;
				entity.ParamName = model.ParamName;
				entity.ShowName = model.ShowName;
				entity.ParamType = model.ParamType;
				entity.ParamData = model.ParamData;
				entity.DefaultValue = model.DefaultValue;
				entity.ParamElement = model.ParamElement;
				entity.Remark = model.Remark;
				entity.CreatePerson = model.CreatePerson;
				entity.CreateTime = model.CreateTime;
				entity.ModifyPerson = model.ModifyPerson;
				entity.ModifyTime = model.ModifyTime;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, object id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, object[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, WMS_ReportParamModel model)
        {
            try
            {
                WMS_ReportParam entity = m_Rep.GetById(model.Id);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.Id = model.Id;
				entity.ParamCode = model.ParamCode;
				entity.ReportId = model.ReportId;
				entity.InputNo = model.InputNo;
				entity.ParamName = model.ParamName;
				entity.ShowName = model.ShowName;
				entity.ParamType = model.ParamType;
				entity.ParamData = model.ParamData;
				entity.DefaultValue = model.DefaultValue;
				entity.ParamElement = model.ParamElement;
				entity.Remark = model.Remark;
				entity.CreatePerson = model.CreatePerson;
				entity.CreateTime = model.CreateTime;
				entity.ModifyPerson = model.ModifyPerson;
				entity.ModifyTime = model.ModifyTime;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual WMS_ReportParamModel GetById(object id)
        {
            if (IsExists(id))
            {
                WMS_ReportParam entity = m_Rep.GetById(id);
                WMS_ReportParamModel model = new WMS_ReportParamModel();
                              				model.Id = entity.Id;
				model.ParamCode = entity.ParamCode;
				model.ReportId = entity.ReportId;
				model.InputNo = entity.InputNo;
				model.ParamName = entity.ParamName;
				model.ShowName = entity.ShowName;
				model.ParamType = entity.ParamType;
				model.ParamData = entity.ParamData;
				model.DefaultValue = entity.DefaultValue;
				model.ParamElement = entity.ParamElement;
				model.Remark = entity.Remark;
				model.CreatePerson = entity.CreatePerson;
				model.CreateTime = entity.CreateTime;
				model.ModifyPerson = entity.ModifyPerson;
				model.ModifyTime = entity.ModifyTime;
 
                return model;
            }
            else
            {
                return null;
            }
        }


		 /// <summary>
        /// 校验Excel数据,这个方法一般用于重写校验逻辑
        /// </summary>
        public virtual bool CheckImportData(string fileName, List<WMS_ReportParamModel> list,ref ValidationErrors errors )
        {
          
            var targetFile = new FileInfo(fileName);

            if (!targetFile.Exists)
            {

                errors.Add("导入的数据文件不存在");
                return false;
            }

            var excelFile = new ExcelQueryFactory(fileName);

            //对应列头
			 				 excelFile.AddMapping<WMS_ReportParamModel>(x => x.ParamCode, "参数代码");
				 excelFile.AddMapping<WMS_ReportParamModel>(x => x.ReportId, "报表ID");
				 excelFile.AddMapping<WMS_ReportParamModel>(x => x.InputNo, "InputNo");
				 excelFile.AddMapping<WMS_ReportParamModel>(x => x.ParamName, "参数名");
				 excelFile.AddMapping<WMS_ReportParamModel>(x => x.ShowName, "显示名称");
				 excelFile.AddMapping<WMS_ReportParamModel>(x => x.ParamType, "参数类型：varchar、int、datetime");
				 excelFile.AddMapping<WMS_ReportParamModel>(x => x.ParamData, "可选值");
				 excelFile.AddMapping<WMS_ReportParamModel>(x => x.DefaultValue, "默认值");
				 excelFile.AddMapping<WMS_ReportParamModel>(x => x.ParamElement, "显示元素：文本框、下拉框、日期框等");
				 excelFile.AddMapping<WMS_ReportParamModel>(x => x.Remark, "备注");
				 excelFile.AddMapping<WMS_ReportParamModel>(x => x.CreatePerson, "创建人");
				 excelFile.AddMapping<WMS_ReportParamModel>(x => x.CreateTime, "创建时间");
				 excelFile.AddMapping<WMS_ReportParamModel>(x => x.ModifyPerson, "修改人");
				 excelFile.AddMapping<WMS_ReportParamModel>(x => x.ModifyTime, "修改时间");
 
            //SheetName
            var excelContent = excelFile.Worksheet<WMS_ReportParamModel>(0);
            int rowIndex = 1;
            //检查数据正确性
            foreach (var row in excelContent)
            {
                var errorMessage = new StringBuilder();
                var entity = new WMS_ReportParamModel();
						 				  entity.Id = row.Id;
				  entity.ParamCode = row.ParamCode;
				  entity.ReportId = row.ReportId;
				  entity.InputNo = row.InputNo;
				  entity.ParamName = row.ParamName;
				  entity.ShowName = row.ShowName;
				  entity.ParamType = row.ParamType;
				  entity.ParamData = row.ParamData;
				  entity.DefaultValue = row.DefaultValue;
				  entity.ParamElement = row.ParamElement;
				  entity.Remark = row.Remark;
				  entity.CreatePerson = row.CreatePerson;
				  entity.CreateTime = row.CreateTime;
				  entity.ModifyPerson = row.ModifyPerson;
				  entity.ModifyTime = row.ModifyTime;
 
                //=============================================================================
                if (errorMessage.Length > 0)
                {
                    errors.Add(string.Format(
                        "第 {0} 列发现错误：{1}{2}",
                        rowIndex,
                        errorMessage,
                        "<br/>"));
                }
                list.Add(entity);
                rowIndex += 1;
            }
            if (errors.Count > 0)
            {
                return false;
            }
            return true;
        }

        /// <summary>
        /// 保存数据
        /// </summary>
        public virtual void SaveImportData(IEnumerable<WMS_ReportParamModel> list)
        {
            try
            {
                using (DBContainer db = new DBContainer())
                {
                    foreach (var model in list)
                    {
                        WMS_ReportParam entity = new WMS_ReportParam();
                       						entity.Id = 0;
						entity.ParamCode = model.ParamCode;
						entity.ReportId = model.ReportId;
						entity.InputNo = model.InputNo;
						entity.ParamName = model.ParamName;
						entity.ShowName = model.ShowName;
						entity.ParamType = model.ParamType;
						entity.ParamData = model.ParamData;
						entity.DefaultValue = model.DefaultValue;
						entity.ParamElement = model.ParamElement;
						entity.Remark = model.Remark;
						entity.CreatePerson = model.CreatePerson;
						entity.CreateTime = ResultHelper.NowTime;
						entity.ModifyPerson = model.ModifyPerson;
						entity.ModifyTime = model.ModifyTime;
 
                        db.WMS_ReportParam.Add(entity);
                    }
                    db.SaveChanges();
                }
            }
            catch(Exception ex)
            {
                throw;
            }
        }
		public virtual bool Check(ref ValidationErrors errors, object id,int flag)
        {
			return true;
		}

        public virtual bool IsExists(object id)
        {
            return m_Rep.IsExist(id);
        }
		
		public void Dispose()
        { 
            
        }

	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Unity.Attributes;
using System.Transactions;
using Apps.BLL.Core;
using Apps.Locale;
using LinqToExcel;
using System.IO;
using System.Text;
using Apps.IDAL.WMS;
using Apps.Models.WMS;
using Apps.IBLL.WMS;
namespace Apps.BLL.WMS
{
	public partial class WMS_PartBLL: Virtual_WMS_PartBLL,IWMS_PartBLL
	{
        

	}
	public class Virtual_WMS_PartBLL
	{
        [Dependency]
        public IWMS_PartRepository m_Rep { get; set; }

		public virtual List<WMS_PartModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<WMS_Part> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								
								a=>a.part_code.Contains(queryStr)
								|| a.part_name.Contains(queryStr)
								|| a.part_type.Contains(queryStr)
								|| a.customer_code.Contains(queryStr)
								|| a.logistics_code.Contains(queryStr)
								|| a.other_code.Contains(queryStr)
								
								|| a.storeman.Contains(queryStr)
								|| a.status.Contains(queryStr)
								|| a.created_by.Contains(queryStr)
								
								|| a.updated_by.Contains(queryStr)
								
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }

		public virtual List<WMS_PartModel> GetListByUserId(ref GridPager pager, string userId,string queryStr)
		{
			return new List<WMS_PartModel>();
		}
		
		public virtual List<WMS_PartModel> GetListByParentId(ref GridPager pager, string queryStr,object parentId)
        {
			return new List<WMS_PartModel>();
		}

        public virtual List<WMS_PartModel> CreateModelList(ref IQueryable<WMS_Part> queryData)
        {

            List<WMS_PartModel> modelList = (from r in queryData
                                              select new WMS_PartModel
                                              {
													id = r.id,
													part_code = r.part_code,
													part_name = r.part_name,
													part_type = r.part_type,
													customer_code = r.customer_code,
													logistics_code = r.logistics_code,
													other_code = r.other_code,
													pcs = r.pcs,
													storeman = r.storeman,
													status = r.status,
													created_by = r.created_by,
													creation_date = r.creation_date,
													updated_by = r.updated_by,
													update_date = r.update_date,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, WMS_PartModel model)
        {
            try
            {
                WMS_Part entity = m_Rep.GetById(model.id);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new WMS_Part();
               				entity.id = model.id;
				entity.part_code = model.part_code;
				entity.part_name = model.part_name;
				entity.part_type = model.part_type;
				entity.customer_code = model.customer_code;
				entity.logistics_code = model.logistics_code;
				entity.other_code = model.other_code;
				entity.pcs = model.pcs;
				entity.storeman = model.storeman;
				entity.status = model.status;
				entity.created_by = model.created_by;
				entity.creation_date = model.creation_date;
				entity.updated_by = model.updated_by;
				entity.update_date = model.update_date;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, object id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, object[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, WMS_PartModel model)
        {
            try
            {
                WMS_Part entity = m_Rep.GetById(model.id);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.id = model.id;
				entity.part_code = model.part_code;
				entity.part_name = model.part_name;
				entity.part_type = model.part_type;
				entity.customer_code = model.customer_code;
				entity.logistics_code = model.logistics_code;
				entity.other_code = model.other_code;
				entity.pcs = model.pcs;
				entity.storeman = model.storeman;
				entity.status = model.status;
				entity.created_by = model.created_by;
				entity.creation_date = model.creation_date;
				entity.updated_by = model.updated_by;
				entity.update_date = model.update_date;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual WMS_PartModel GetById(object id)
        {
            if (IsExists(id))
            {
                WMS_Part entity = m_Rep.GetById(id);
                WMS_PartModel model = new WMS_PartModel();
                              				model.id = entity.id;
				model.part_code = entity.part_code;
				model.part_name = entity.part_name;
				model.part_type = entity.part_type;
				model.customer_code = entity.customer_code;
				model.logistics_code = entity.logistics_code;
				model.other_code = entity.other_code;
				model.pcs = entity.pcs;
				model.storeman = entity.storeman;
				model.status = entity.status;
				model.created_by = entity.created_by;
				model.creation_date = entity.creation_date;
				model.updated_by = entity.updated_by;
				model.update_date = entity.update_date;
 
                return model;
            }
            else
            {
                return null;
            }
        }


		 /// <summary>
        /// 校验Excel数据,这个方法一般用于重写校验逻辑
        /// </summary>
        public virtual bool CheckImportData(string fileName, List<WMS_PartModel> list,ref ValidationErrors errors )
        {
          
            var targetFile = new FileInfo(fileName);

            if (!targetFile.Exists)
            {

                errors.Add("导入的数据文件不存在");
                return false;
            }

            var excelFile = new ExcelQueryFactory(fileName);

            //对应列头
			 				 excelFile.AddMapping<WMS_PartModel>(x => x.id, "id");
				 excelFile.AddMapping<WMS_PartModel>(x => x.part_code, "part_code");
				 excelFile.AddMapping<WMS_PartModel>(x => x.part_name, "part_name");
				 excelFile.AddMapping<WMS_PartModel>(x => x.part_type, "part_type");
				 excelFile.AddMapping<WMS_PartModel>(x => x.customer_code, "customer_code");
				 excelFile.AddMapping<WMS_PartModel>(x => x.logistics_code, "logistics_code");
				 excelFile.AddMapping<WMS_PartModel>(x => x.other_code, "other_code");
				 excelFile.AddMapping<WMS_PartModel>(x => x.pcs, "pcs");
				 excelFile.AddMapping<WMS_PartModel>(x => x.storeman, "storeman");
				 excelFile.AddMapping<WMS_PartModel>(x => x.status, "status");
				 excelFile.AddMapping<WMS_PartModel>(x => x.created_by, "created_by");
				 excelFile.AddMapping<WMS_PartModel>(x => x.creation_date, "creation_date");
				 excelFile.AddMapping<WMS_PartModel>(x => x.updated_by, "updated_by");
				 excelFile.AddMapping<WMS_PartModel>(x => x.update_date, "update_date");
 
            //SheetName
            var excelContent = excelFile.Worksheet<WMS_PartModel>(0);
            int rowIndex = 1;
            //检查数据正确性
            foreach (var row in excelContent)
            {
                var errorMessage = new StringBuilder();
                var entity = new WMS_PartModel();
						 				  entity.id = row.id;
				  entity.part_code = row.part_code;
				  entity.part_name = row.part_name;
				  entity.part_type = row.part_type;
				  entity.customer_code = row.customer_code;
				  entity.logistics_code = row.logistics_code;
				  entity.other_code = row.other_code;
				  entity.pcs = row.pcs;
				  entity.storeman = row.storeman;
				  entity.status = row.status;
				  entity.created_by = row.created_by;
				  entity.creation_date = row.creation_date;
				  entity.updated_by = row.updated_by;
				  entity.update_date = row.update_date;
 
                //=============================================================================
                if (errorMessage.Length > 0)
                {
                    errors.Add(string.Format(
                        "第 {0} 列发现错误：{1}{2}",
                        rowIndex,
                        errorMessage,
                        "<br/>"));
                }
                list.Add(entity);
                rowIndex += 1;
            }
            if (errors.Count > 0)
            {
                return false;
            }
            return true;
        }

        /// <summary>
        /// 保存数据
        /// </summary>
        public virtual void SaveImportData(IEnumerable<WMS_PartModel> list)
        {
            try
            {
                using (DBContainer db = new DBContainer())
                {
                    foreach (var model in list)
                    {
                        WMS_Part entity = new WMS_Part();
                       						entity.id = model.id;
						entity.part_code = model.part_code;
						entity.part_name = model.part_name;
						entity.part_type = model.part_type;
						entity.customer_code = model.customer_code;
						entity.logistics_code = model.logistics_code;
						entity.other_code = model.other_code;
						entity.pcs = model.pcs;
						entity.storeman = model.storeman;
						entity.status = model.status;
						entity.created_by = model.created_by;
						entity.creation_date = model.creation_date;
						entity.updated_by = model.updated_by;
						entity.update_date = model.update_date;
 
                        db.WMS_Part.Add(entity);
                    }
                    db.SaveChanges();
                }
            }
            catch(Exception ex)
            {
                throw;
            }
        }
		public virtual bool Check(ref ValidationErrors errors, object id,int flag)
        {
			return true;
		}

        public virtual bool IsExists(object id)
        {
            return m_Rep.IsExist(id);
        }
		
		public void Dispose()
        { 
            
        }

	}
}

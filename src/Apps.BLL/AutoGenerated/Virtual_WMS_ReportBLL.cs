//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Unity.Attributes;
using System.Transactions;
using Apps.BLL.Core;
using Apps.Locale;
using LinqToExcel;
using System.IO;
using System.Text;
using Apps.IDAL.WMS;
using Apps.Models.WMS;
using Apps.IBLL.WMS;
namespace Apps.BLL.WMS
{
	public partial class WMS_ReportBLL: Virtual_WMS_ReportBLL,IWMS_ReportBLL
	{
        

	}
	public class Virtual_WMS_ReportBLL
	{
        [Dependency]
        public IWMS_ReportRepository m_Rep { get; set; }

		public virtual List<WMS_ReportModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<WMS_Report> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								
								a=>a.ReportCode.Contains(queryStr)
								|| a.ReportName.Contains(queryStr)
								
								|| a.Remark.Contains(queryStr)
								|| a.DataSource.Contains(queryStr)
								|| a.FileName.Contains(queryStr)
								|| a.Status.Contains(queryStr)
								|| a.CreatePerson.Contains(queryStr)
								
								|| a.ModifyPerson.Contains(queryStr)
								
								
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }

		public virtual List<WMS_ReportModel> GetListByUserId(ref GridPager pager, string userId,string queryStr)
		{
			return new List<WMS_ReportModel>();
		}
		
		public virtual List<WMS_ReportModel> GetListByParentId(ref GridPager pager, string queryStr,object parentId)
        {
			return new List<WMS_ReportModel>();
		}

        public virtual List<WMS_ReportModel> CreateModelList(ref IQueryable<WMS_Report> queryData)
        {

            List<WMS_ReportModel> modelList = (from r in queryData
                                              select new WMS_ReportModel
                                              {
													Id = r.Id,
													ReportCode = r.ReportCode,
													ReportName = r.ReportName,
													ReportType = r.ReportType,
													Remark = r.Remark,
													DataSource = r.DataSource,
													FileName = r.FileName,
													Status = r.Status,
													CreatePerson = r.CreatePerson,
													CreateTime = r.CreateTime,
													ModifyPerson = r.ModifyPerson,
													ModifyTime = r.ModifyTime,
													DataSourceType = r.DataSourceType,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, WMS_ReportModel model)
        {
            try
            {
                WMS_Report entity = m_Rep.GetById(model.Id);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new WMS_Report();
               				entity.Id = model.Id;
				entity.ReportCode = model.ReportCode;
				entity.ReportName = model.ReportName;
				entity.ReportType = model.ReportType;
				entity.Remark = model.Remark;
				entity.DataSource = model.DataSource;
				entity.FileName = model.FileName;
				entity.Status = model.Status;
				entity.CreatePerson = model.CreatePerson;
				entity.CreateTime = model.CreateTime;
				entity.ModifyPerson = model.ModifyPerson;
				entity.ModifyTime = model.ModifyTime;
				entity.DataSourceType = model.DataSourceType;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, object id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, object[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, WMS_ReportModel model)
        {
            try
            {
                WMS_Report entity = m_Rep.GetById(model.Id);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.Id = model.Id;
				entity.ReportCode = model.ReportCode;
				entity.ReportName = model.ReportName;
				entity.ReportType = model.ReportType;
				entity.Remark = model.Remark;
				entity.DataSource = model.DataSource;
				entity.FileName = model.FileName;
				entity.Status = model.Status;
				entity.CreatePerson = model.CreatePerson;
				entity.CreateTime = model.CreateTime;
				entity.ModifyPerson = model.ModifyPerson;
				entity.ModifyTime = model.ModifyTime;
				entity.DataSourceType = model.DataSourceType;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual WMS_ReportModel GetById(object id)
        {
            if (IsExists(id))
            {
                WMS_Report entity = m_Rep.GetById(id);
                WMS_ReportModel model = new WMS_ReportModel();
                              				model.Id = entity.Id;
				model.ReportCode = entity.ReportCode;
				model.ReportName = entity.ReportName;
				model.ReportType = entity.ReportType;
				model.Remark = entity.Remark;
				model.DataSource = entity.DataSource;
				model.FileName = entity.FileName;
				model.Status = entity.Status;
				model.CreatePerson = entity.CreatePerson;
				model.CreateTime = entity.CreateTime;
				model.ModifyPerson = entity.ModifyPerson;
				model.ModifyTime = entity.ModifyTime;
				model.DataSourceType = entity.DataSourceType;
 
                return model;
            }
            else
            {
                return null;
            }
        }


		 /// <summary>
        /// 校验Excel数据,这个方法一般用于重写校验逻辑
        /// </summary>
        public virtual bool CheckImportData(string fileName, List<WMS_ReportModel> list,ref ValidationErrors errors )
        {
          
            var targetFile = new FileInfo(fileName);

            if (!targetFile.Exists)
            {

                errors.Add("导入的数据文件不存在");
                return false;
            }

            var excelFile = new ExcelQueryFactory(fileName);

            //对应列头
			 				 excelFile.AddMapping<WMS_ReportModel>(x => x.ReportCode, "报表编码");
				 excelFile.AddMapping<WMS_ReportModel>(x => x.ReportName, "报表名称");
				 excelFile.AddMapping<WMS_ReportModel>(x => x.ReportType, "报表类型：1-单据，2-报表");
				 excelFile.AddMapping<WMS_ReportModel>(x => x.Remark, "备注");
				 excelFile.AddMapping<WMS_ReportModel>(x => x.DataSource, "数据源");
				 excelFile.AddMapping<WMS_ReportModel>(x => x.FileName, "报表文件");
				 excelFile.AddMapping<WMS_ReportModel>(x => x.Status, "状态");
				 excelFile.AddMapping<WMS_ReportModel>(x => x.CreatePerson, "创建人");
				 excelFile.AddMapping<WMS_ReportModel>(x => x.CreateTime, "创建时间");
				 excelFile.AddMapping<WMS_ReportModel>(x => x.ModifyPerson, "修改人");
				 excelFile.AddMapping<WMS_ReportModel>(x => x.ModifyTime, "修改时间");
				 excelFile.AddMapping<WMS_ReportModel>(x => x.DataSourceType, "数据源类型：1-SQL语句；2-存储过程");
 
            //SheetName
            var excelContent = excelFile.Worksheet<WMS_ReportModel>(0);
            int rowIndex = 1;
            //检查数据正确性
            foreach (var row in excelContent)
            {
                var errorMessage = new StringBuilder();
                var entity = new WMS_ReportModel();
						 				  entity.Id = row.Id;
				  entity.ReportCode = row.ReportCode;
				  entity.ReportName = row.ReportName;
				  entity.ReportType = row.ReportType;
				  entity.Remark = row.Remark;
				  entity.DataSource = row.DataSource;
				  entity.FileName = row.FileName;
				  entity.Status = row.Status;
				  entity.CreatePerson = row.CreatePerson;
				  entity.CreateTime = row.CreateTime;
				  entity.ModifyPerson = row.ModifyPerson;
				  entity.ModifyTime = row.ModifyTime;
				  entity.DataSourceType = row.DataSourceType;
 
                //=============================================================================
                if (errorMessage.Length > 0)
                {
                    errors.Add(string.Format(
                        "第 {0} 列发现错误：{1}{2}",
                        rowIndex,
                        errorMessage,
                        "<br/>"));
                }
                list.Add(entity);
                rowIndex += 1;
            }
            if (errors.Count > 0)
            {
                return false;
            }
            return true;
        }

        /// <summary>
        /// 保存数据
        /// </summary>
        public virtual void SaveImportData(IEnumerable<WMS_ReportModel> list)
        {
            try
            {
                using (DBContainer db = new DBContainer())
                {
                    foreach (var model in list)
                    {
                        WMS_Report entity = new WMS_Report();
                       						entity.Id = 0;
						entity.ReportCode = model.ReportCode;
						entity.ReportName = model.ReportName;
						entity.ReportType = model.ReportType;
						entity.Remark = model.Remark;
						entity.DataSource = model.DataSource;
						entity.FileName = model.FileName;
						entity.Status = model.Status;
						entity.CreatePerson = model.CreatePerson;
						entity.CreateTime = ResultHelper.NowTime;
						entity.ModifyPerson = model.ModifyPerson;
						entity.ModifyTime = model.ModifyTime;
						entity.DataSourceType = model.DataSourceType;
 
                        db.WMS_Report.Add(entity);
                    }
                    db.SaveChanges();
                }
            }
            catch(Exception ex)
            {
                throw;
            }
        }
		public virtual bool Check(ref ValidationErrors errors, object id,int flag)
        {
			return true;
		}

        public virtual bool IsExists(object id)
        {
            return m_Rep.IsExist(id);
        }
		
		public void Dispose()
        { 
            
        }

	}
}

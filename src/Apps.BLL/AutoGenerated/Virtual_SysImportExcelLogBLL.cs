//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Unity.Attributes;
using System.Transactions;
using Apps.BLL.Core;
using Apps.Locale;
using LinqToExcel;
using System.IO;
using System.Text;
using Apps.IDAL.Sys;
using Apps.Models.Sys;
using Apps.IBLL.Sys;
namespace Apps.BLL.Sys
{
	public partial class SysImportExcelLogBLL: Virtual_SysImportExcelLogBLL,ISysImportExcelLogBLL
	{
        

	}
	public class Virtual_SysImportExcelLogBLL
	{
        [Dependency]
        public ISysImportExcelLogRepository m_Rep { get; set; }

		public virtual List<SysImportExcelLogModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<SysImportExcelLog> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								
								
								a=>a.ImportTable.Contains(queryStr)
								|| a.ImportFileName.Contains(queryStr)
								|| a.ImportFilePathUrl.Contains(queryStr)
								|| a.ImportStatus.Contains(queryStr)
								|| a.CreateBy.Contains(queryStr)
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }

		public virtual List<SysImportExcelLogModel> GetListByUserId(ref GridPager pager, string userId,string queryStr)
		{
			return new List<SysImportExcelLogModel>();
		}
		
		public virtual List<SysImportExcelLogModel> GetListByParentId(ref GridPager pager, string queryStr,object parentId)
        {
			return new List<SysImportExcelLogModel>();
		}

        public virtual List<SysImportExcelLogModel> CreateModelList(ref IQueryable<SysImportExcelLog> queryData)
        {

            List<SysImportExcelLogModel> modelList = (from r in queryData
                                              select new SysImportExcelLogModel
                                              {
													Id = r.Id,
													ImportTime = r.ImportTime,
													ImportTable = r.ImportTable,
													ImportFileName = r.ImportFileName,
													ImportFilePathUrl = r.ImportFilePathUrl,
													ImportStatus = r.ImportStatus,
													CreateBy = r.CreateBy,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, SysImportExcelLogModel model)
        {
            try
            {
                SysImportExcelLog entity = m_Rep.GetById(model.Id);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new SysImportExcelLog();
               				entity.Id = model.Id;
				entity.ImportTime = model.ImportTime;
				entity.ImportTable = model.ImportTable;
				entity.ImportFileName = model.ImportFileName;
				entity.ImportFilePathUrl = model.ImportFilePathUrl;
				entity.ImportStatus = model.ImportStatus;
				entity.CreateBy = model.CreateBy;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, object id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, object[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, SysImportExcelLogModel model)
        {
            try
            {
                SysImportExcelLog entity = m_Rep.GetById(model.Id);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.Id = model.Id;
				entity.ImportTime = model.ImportTime;
				entity.ImportTable = model.ImportTable;
				entity.ImportFileName = model.ImportFileName;
				entity.ImportFilePathUrl = model.ImportFilePathUrl;
				entity.ImportStatus = model.ImportStatus;
				entity.CreateBy = model.CreateBy;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual SysImportExcelLogModel GetById(object id)
        {
            if (IsExists(id))
            {
                SysImportExcelLog entity = m_Rep.GetById(id);
                SysImportExcelLogModel model = new SysImportExcelLogModel();
                              				model.Id = entity.Id;
				model.ImportTime = entity.ImportTime;
				model.ImportTable = entity.ImportTable;
				model.ImportFileName = entity.ImportFileName;
				model.ImportFilePathUrl = entity.ImportFilePathUrl;
				model.ImportStatus = entity.ImportStatus;
				model.CreateBy = entity.CreateBy;
 
                return model;
            }
            else
            {
                return null;
            }
        }


		 /// <summary>
        /// 校验Excel数据,这个方法一般用于重写校验逻辑
        /// </summary>
        public virtual bool CheckImportData(string fileName, List<SysImportExcelLogModel> list,ref ValidationErrors errors )
        {
          
            var targetFile = new FileInfo(fileName);

            if (!targetFile.Exists)
            {

                errors.Add("导入的数据文件不存在");
                return false;
            }

            var excelFile = new ExcelQueryFactory(fileName);

            //对应列头
			 				 excelFile.AddMapping<SysImportExcelLogModel>(x => x.ImportTime, "导入时间");
				 excelFile.AddMapping<SysImportExcelLogModel>(x => x.ImportTable, "导入的表名");
				 excelFile.AddMapping<SysImportExcelLogModel>(x => x.ImportFileName, "导入的文件名");
				 excelFile.AddMapping<SysImportExcelLogModel>(x => x.ImportFilePathUrl, "导入的文件Url");
				 excelFile.AddMapping<SysImportExcelLogModel>(x => x.ImportStatus, "导入状态");
				 excelFile.AddMapping<SysImportExcelLogModel>(x => x.CreateBy, "导入用户");
 
            //SheetName
            var excelContent = excelFile.Worksheet<SysImportExcelLogModel>(0);
            int rowIndex = 1;
            //检查数据正确性
            foreach (var row in excelContent)
            {
                var errorMessage = new StringBuilder();
                var entity = new SysImportExcelLogModel();
						 				  entity.Id = row.Id;
				  entity.ImportTime = row.ImportTime;
				  entity.ImportTable = row.ImportTable;
				  entity.ImportFileName = row.ImportFileName;
				  entity.ImportFilePathUrl = row.ImportFilePathUrl;
				  entity.ImportStatus = row.ImportStatus;
				  entity.CreateBy = row.CreateBy;
 
                //=============================================================================
                if (errorMessage.Length > 0)
                {
                    errors.Add(string.Format(
                        "第 {0} 列发现错误：{1}{2}",
                        rowIndex,
                        errorMessage,
                        "<br/>"));
                }
                list.Add(entity);
                rowIndex += 1;
            }
            if (errors.Count > 0)
            {
                return false;
            }
            return true;
        }

        /// <summary>
        /// 保存数据
        /// </summary>
        public virtual void SaveImportData(IEnumerable<SysImportExcelLogModel> list)
        {
            try
            {
                using (DBContainer db = new DBContainer())
                {
                    foreach (var model in list)
                    {
                        SysImportExcelLog entity = new SysImportExcelLog();
                       						entity.Id = 0;
						entity.ImportTime = model.ImportTime;
						entity.ImportTable = model.ImportTable;
						entity.ImportFileName = model.ImportFileName;
						entity.ImportFilePathUrl = model.ImportFilePathUrl;
						entity.ImportStatus = model.ImportStatus;
						entity.CreateBy = model.CreateBy;
 
                        db.SysImportExcelLog.Add(entity);
                    }
                    db.SaveChanges();
                }
            }
            catch(Exception ex)
            {
                throw;
            }
        }
		public virtual bool Check(ref ValidationErrors errors, object id,int flag)
        {
			return true;
		}

        public virtual bool IsExists(object id)
        {
            return m_Rep.IsExist(id);
        }
		
		public void Dispose()
        { 
            
        }

	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Unity.Attributes;
using System.Transactions;
using Apps.BLL.Core;
using Apps.Locale;
using LinqToExcel;
using System.IO;
using System.Text;
using Apps.IDAL.WMS;
using Apps.Models.WMS;
using Apps.IBLL.WMS;
namespace Apps.BLL.WMS
{
	public partial class WMS_InvRecordBLL: Virtual_WMS_InvRecordBLL,IWMS_InvRecordBLL
	{
        

	}
	public class Virtual_WMS_InvRecordBLL
	{
        [Dependency]
        public IWMS_InvRecordRepository m_Rep { get; set; }

		public virtual List<WMS_InvRecordModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<WMS_InvRecord> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								
								
								
								
								
								
								a=>a.SourceBill.Contains(queryStr)
								
								|| a.Lot.Contains(queryStr)
								|| a.Type.Contains(queryStr)
								|| a.OperateMan.Contains(queryStr)
								
								
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }

		public virtual List<WMS_InvRecordModel> GetListByUserId(ref GridPager pager, string userId,string queryStr)
		{
			return new List<WMS_InvRecordModel>();
		}
		
		public virtual List<WMS_InvRecordModel> GetListByParentId(ref GridPager pager, string queryStr,object parentId)
        {
			return new List<WMS_InvRecordModel>();
		}

        public virtual List<WMS_InvRecordModel> CreateModelList(ref IQueryable<WMS_InvRecord> queryData)
        {

            List<WMS_InvRecordModel> modelList = (from r in queryData
                                              select new WMS_InvRecordModel
                                              {
													Id = r.Id,
													PartId = r.PartId,
													QTY = r.QTY,
													InvId = r.InvId,
													SubInvId = r.SubInvId,
													BillId = r.BillId,
													SourceBill = r.SourceBill,
													OperateDate = r.OperateDate,
													Lot = r.Lot,
													Type = r.Type,
													OperateMan = r.OperateMan,
													Stock_InvId = r.Stock_InvId,
													StockStatus = r.StockStatus,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, WMS_InvRecordModel model)
        {
            try
            {
                WMS_InvRecord entity = m_Rep.GetById(model.Id);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new WMS_InvRecord();
               				entity.Id = model.Id;
				entity.PartId = model.PartId;
				entity.QTY = model.QTY;
				entity.InvId = model.InvId;
				entity.SubInvId = model.SubInvId;
				entity.BillId = model.BillId;
				entity.SourceBill = model.SourceBill;
				entity.OperateDate = model.OperateDate;
				entity.Lot = model.Lot;
				entity.Type = model.Type;
				entity.OperateMan = model.OperateMan;
				entity.Stock_InvId = model.Stock_InvId;
				entity.StockStatus = model.StockStatus;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, object id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, object[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, WMS_InvRecordModel model)
        {
            try
            {
                WMS_InvRecord entity = m_Rep.GetById(model.Id);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.Id = model.Id;
				entity.PartId = model.PartId;
				entity.QTY = model.QTY;
				entity.InvId = model.InvId;
				entity.SubInvId = model.SubInvId;
				entity.BillId = model.BillId;
				entity.SourceBill = model.SourceBill;
				entity.OperateDate = model.OperateDate;
				entity.Lot = model.Lot;
				entity.Type = model.Type;
				entity.OperateMan = model.OperateMan;
				entity.Stock_InvId = model.Stock_InvId;
				entity.StockStatus = model.StockStatus;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual WMS_InvRecordModel GetById(object id)
        {
            if (IsExists(id))
            {
                WMS_InvRecord entity = m_Rep.GetById(id);
                WMS_InvRecordModel model = new WMS_InvRecordModel();
                              				model.Id = entity.Id;
				model.PartId = entity.PartId;
				model.QTY = entity.QTY;
				model.InvId = entity.InvId;
				model.SubInvId = entity.SubInvId;
				model.BillId = entity.BillId;
				model.SourceBill = entity.SourceBill;
				model.OperateDate = entity.OperateDate;
				model.Lot = entity.Lot;
				model.Type = entity.Type;
				model.OperateMan = entity.OperateMan;
				model.Stock_InvId = entity.Stock_InvId;
				model.StockStatus = entity.StockStatus;
 
                return model;
            }
            else
            {
                return null;
            }
        }


		 /// <summary>
        /// 校验Excel数据,这个方法一般用于重写校验逻辑
        /// </summary>
        public virtual bool CheckImportData(string fileName, List<WMS_InvRecordModel> list,ref ValidationErrors errors )
        {
          
            var targetFile = new FileInfo(fileName);

            if (!targetFile.Exists)
            {

                errors.Add("导入的数据文件不存在");
                return false;
            }

            var excelFile = new ExcelQueryFactory(fileName);

            //对应列头
			 				 excelFile.AddMapping<WMS_InvRecordModel>(x => x.PartId, "物料编码");
				 excelFile.AddMapping<WMS_InvRecordModel>(x => x.QTY, "数量");
				 excelFile.AddMapping<WMS_InvRecordModel>(x => x.InvId, "库房编码");
				 excelFile.AddMapping<WMS_InvRecordModel>(x => x.SubInvId, "SubInvId");
				 excelFile.AddMapping<WMS_InvRecordModel>(x => x.BillId, "单据ID");
				 excelFile.AddMapping<WMS_InvRecordModel>(x => x.SourceBill, "单据来源");
				 excelFile.AddMapping<WMS_InvRecordModel>(x => x.OperateDate, "操作时间");
				 excelFile.AddMapping<WMS_InvRecordModel>(x => x.Lot, "Lot");
				 excelFile.AddMapping<WMS_InvRecordModel>(x => x.Type, "出入库类型");
				 excelFile.AddMapping<WMS_InvRecordModel>(x => x.OperateMan, "操作人");
				 excelFile.AddMapping<WMS_InvRecordModel>(x => x.Stock_InvId, "备料库存");
				 excelFile.AddMapping<WMS_InvRecordModel>(x => x.StockStatus, "备料状态：1-不适用（直接修改库存现有量）；2-已备料；3-无效备料（取消备料后将2改成3）；4-取消备料（当前操作是取消备料）");
 
            //SheetName
            var excelContent = excelFile.Worksheet<WMS_InvRecordModel>(0);
            int rowIndex = 1;
            //检查数据正确性
            foreach (var row in excelContent)
            {
                var errorMessage = new StringBuilder();
                var entity = new WMS_InvRecordModel();
						 				  entity.Id = row.Id;
				  entity.PartId = row.PartId;
				  entity.QTY = row.QTY;
				  entity.InvId = row.InvId;
				  entity.SubInvId = row.SubInvId;
				  entity.BillId = row.BillId;
				  entity.SourceBill = row.SourceBill;
				  entity.OperateDate = row.OperateDate;
				  entity.Lot = row.Lot;
				  entity.Type = row.Type;
				  entity.OperateMan = row.OperateMan;
				  entity.Stock_InvId = row.Stock_InvId;
				  entity.StockStatus = row.StockStatus;
 
                //=============================================================================
                if (errorMessage.Length > 0)
                {
                    errors.Add(string.Format(
                        "第 {0} 列发现错误：{1}{2}",
                        rowIndex,
                        errorMessage,
                        "<br/>"));
                }
                list.Add(entity);
                rowIndex += 1;
            }
            if (errors.Count > 0)
            {
                return false;
            }
            return true;
        }

        /// <summary>
        /// 保存数据
        /// </summary>
        public virtual void SaveImportData(IEnumerable<WMS_InvRecordModel> list)
        {
            try
            {
                using (DBContainer db = new DBContainer())
                {
                    foreach (var model in list)
                    {
                        WMS_InvRecord entity = new WMS_InvRecord();
                       						entity.Id = 0;
						entity.PartId = model.PartId;
						entity.QTY = model.QTY;
						entity.InvId = model.InvId;
						entity.SubInvId = model.SubInvId;
						entity.BillId = model.BillId;
						entity.SourceBill = model.SourceBill;
						entity.OperateDate = model.OperateDate;
						entity.Lot = model.Lot;
						entity.Type = model.Type;
						entity.OperateMan = model.OperateMan;
						entity.Stock_InvId = model.Stock_InvId;
						entity.StockStatus = model.StockStatus;
 
                        db.WMS_InvRecord.Add(entity);
                    }
                    db.SaveChanges();
                }
            }
            catch(Exception ex)
            {
                throw;
            }
        }
		public virtual bool Check(ref ValidationErrors errors, object id,int flag)
        {
			return true;
		}

        public virtual bool IsExists(object id)
        {
            return m_Rep.IsExist(id);
        }
		
		public void Dispose()
        { 
            
        }

	}
}
